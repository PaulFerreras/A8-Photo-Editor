package picasso;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;

import javax.imageio.ImageIO;

public class PictureImpl extends AnyPicture {
	
	private Pixel[][] pixels;
	
	private static final Pixel INITIAL_PIXEL = new GrayPixel(1.0);
	
	//PF: Constructor of PictureImpl
	//Pixels of picture are stored in 2d array. Typical...
	//When PictureImpl is first constructed, it gets filled with
	//final Pixel White (INITIAL_PIXEL).
	public PictureImpl(int width, int height) {
		pixels = new Pixel[width][height];
		for (int x=0; x<width; x++) {
			for (int y=0; y<height; y++) {
				pixels[x][y] = INITIAL_PIXEL;
			}
		}
	}

	//PF: Sets Pixel with an x and y value.
	//AnyPicture's Set Pixel with an upper left coordinate
	//and a lower right coordinate is pointed at this.
	@Override
	public void setPixel(int x, int y, Pixel p) {
		if (p == null) {
			throw new RuntimeException("Pixel p is null");
		}
		if (x < 0 || x >= getWidth()) {
			throw new RuntimeException("x is out of bounds");
		}
		if (y < 0 || y >= getHeight()) {
			throw new RuntimeException("y is out of bounds");
		}
		pixels[x][y] = p;
	}

	//PF: Gets Pixel with an x and y value.
	//AnyPicture's Get Pixel with an upper left coordinate
	//and a lower right coordinate is pointed at this.
	@Override
	public Pixel getPixel(int x, int y) {
		if (x < 0 || x >= getWidth()) {
			throw new RuntimeException("x is out of bounds");
		}
		if (y < 0 || y >= getHeight()) {
			throw new RuntimeException("y is out of bounds");
		}
		return pixels[x][y];
	}

	//PF: Gets pixels[][] (PictureImpl's) length
	@Override
	public int getWidth() {
		return pixels.length;
	}

	//PF: Gets pixels[][] (PictureImpl's) height
	@Override
	public int getHeight() {
		return pixels[0].length;
	}

	//PF: Reads Picture from URL.
	//It does this by using ImageIO's method read which 
	//takes in a URL and converts it to a Buffered Image (which has RGB values).
	//The Buffered Image is then converted to a Picture using
	//Buffered Image's dimensions to create the Picture object.
	//Each Pixel is then converted and set in the Picture object
	//using Picture's Set Pixel method and ColorPixel's rgbToPixel method.
	public static Picture readFromURL(String url) throws IOException {
		BufferedImage bi = ImageIO.read(new URL(url));
		Picture picture = new PictureImpl(bi.getWidth(), bi.getHeight());
		for (int x=0; x<bi.getWidth(); x++) {
			for (int y=0; y<bi.getHeight(); y++) {
				picture.setPixel(x, y, ColorPixel.rgbToPixel(bi.getRGB(x, y)));
			}
		}
		return picture;
	}

}
